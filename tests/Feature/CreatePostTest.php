<?php

namespace Tests\Feature;

use App\Events\PostCreated;
use App\Jobs\SendEmailToSubscribersJob;
use App\Models\User;
use App\Models\Website;
use App\Models\WebsiteSubscription;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Bus;
use Illuminate\Support\Facades\Event;
use Tests\TestCase;

class CreatePostTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Event::fake();
        Bus::fake();
    }

    public function testsPostAreCreatedCorrectly()
    {
        $website = Website::factory()->create();
        $payload = [
            'title' => 'Title',
            'description' => 'Description',
            'body'=>'Post Body',
            'website_id' => $website->id
        ];

        $this->json('POST', '/api/posts', $payload)
            ->assertStatus(201)
            ->assertJson(['id' => 1,
                'title' => 'Title',
                'description' => 'Description',
                'body'=>'Post Body',
                'website_id' => $website->id
            ]);
    }

    public function testsPostCreatedTriggerPostCreatedEvent()
    {
        $user = User::factory()->create(['email'=>'quabenaa@gmail.com']);
        $website = Website::factory()->create();
        WebsiteSubscription::factory()->create([
            'user_id'=>$user->id,
            'website_id'=>$website->id
        ]);

        $payload = [
            'title' => 'Title',
            'description' => 'Description',
            'body'=>'Post Body',
            'website_id' => $website->id
        ];

        $this->json('POST', '/api/posts', $payload)
            ->assertStatus(201);

        Event::assertDispatched(PostCreated::class);
    }
}
